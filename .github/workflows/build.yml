# .github/workflows/build-no-git.yml
name: ESP32-C3 No-Git Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container: espressif/idf:v5.4.2
    
    steps:
    # 1. 코드 다운로드
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    # 2. ESP-Matter 컴포넌트를 ZIP으로 직접 다운로드
    - name: ESP-Matter 컴포넌트 다운로드
      run: |
        # 작업 디렉토리 생성
        mkdir -p /opt/esp-matter-components
        cd /opt/esp-matter-components
        
        # ESP-Matter 메인 파일들 다운로드 (ZIP)
        echo "📦 ESP-Matter 메인 컴포넌트 다운로드 중..."
        wget -q --no-check-certificate https://github.com/espressif/esp-matter/archive/refs/heads/main.zip -O esp-matter.zip
        unzip -q esp-matter.zip
        mv esp-matter-main esp-matter
        rm esp-matter.zip
        
        # ConnectedHomeIP 컴포넌트 다운로드 (핵심 부분만)
        echo "📦 ConnectedHomeIP 컴포넌트 다운로드 중..."
        mkdir -p esp-matter/connectedhomeip
        cd esp-matter/connectedhomeip
        wget -q --no-check-certificate https://github.com/project-chip/connectedhomeip/archive/refs/heads/master.zip -O chip.zip
        unzip -q chip.zip
        mv connectedhomeip-master connectedhomeip
        rm chip.zip
        
        # 환경변수 설정
        echo "ESP_MATTER_PATH=/opt/esp-matter-components/esp-matter" >> $GITHUB_ENV
        echo "MATTER_SDK_PATH=/opt/esp-matter-components/esp-matter/connectedhomeip/connectedhomeip" >> $GITHUB_ENV

    # 3. 필요한 패키지만 설치
    - name: 필요한 도구 설치
      run: |
        apt-get update -qq
        apt-get install -y -qq python3-pip

    # 4. 프로젝트 빌드
    - name: 프로젝트 빌드
      run: |
        # ESP-IDF 환경 활성화
        . $IDF_PATH/export.sh
        
        # 환경변수 재확인
        export ESP_MATTER_PATH=/opt/esp-matter-components/esp-matter
        export MATTER_SDK_PATH=/opt/esp-matter-components/esp-matter/connectedhomeip/connectedhomeip
        
        echo "✅ ESP_MATTER_PATH: $ESP_MATTER_PATH"
        echo "✅ MATTER_SDK_PATH: $MATTER_SDK_PATH" 
        echo "✅ IDF_PATH: $IDF_PATH"
        
        # 빌드 실행
        idf.py set-target esp32c3
        idf.py build

    # 5. 바이너리 업로드
    - name: 바이너리 업로드
      uses: actions/upload-artifact@v4
      with:
        name: esp32c3-no-git-${{ github.run_number }}
        path: |
          build/*.bin
          build/*.elf
          build/bootloader/bootloader.bin
          build/partition_table/partition-table.bin
        retention-days: 30

    # 6. 플래시 가이드 생성
    - name: 플래시 가이드 생성
      run: |
        cat > flash_guide.txt << 'EOF'
        # ESP32-C3 플래시 가이드
        
        ## 1. 필요한 파일들
        - ESP32C3_MATTER_BME680.bin (메인 펌웨어)
        - bootloader.bin (부트로더)
        - partition-table.bin (파티션 테이블)
        
        ## 2. 플래시 명령어
        
        ### Linux/macOS:
        esptool.py --chip esp32c3 --port /dev/ttyUSB0 --baud 460800 write_flash \
          0x0 bootloader.bin \
          0x8000 partition-table.bin \
          0x10000 ESP32C3_MATTER_BME680.bin
        
        ### Windows:
        esptool.py --chip esp32c3 --port COM3 --baud 460800 write_flash \
          0x0 bootloader.bin \
          0x8000 partition-table.bin \
          0x10000 ESP32C3_MATTER_BME680.bin
        
        ## 3. 포트 찾기
        - Linux: /dev/ttyUSB0, /dev/ttyACM0
        - Windows: COM3, COM4, COM5 등 (장치관리자에서 확인)
        - macOS: /dev/cu.usbserial-* 
        
        ## 4. esptool 설치
        pip install esptool
        
        ## 5. 모니터링
        esptool.py --chip esp32c3 --port [포트] monitor
        EOF

    - name: 플래시 가이드 업로드
      uses: actions/upload-artifact@v4
      with:
        name: flash-guide-${{ github.run_number }}
        path: flash_guide.txt
        retention-days: 30

    # 7. 빌드 결과 확인
    - name: 빌드 결과
      run: |
        echo "🎉 Git 없는 빌드 성공!"
        echo "📁 생성된 파일들:"
        find build -name "*.bin" -o -name "*.elf" | head -5
        echo ""
        echo "📦 다운로드 방법:"
        echo "  1. GitHub → Actions → 이 빌드 클릭"
        echo "  2. Artifacts 섹션에서 파일 다운로드"
        echo "  3. 압축 해제 후 ESP32-C3에 플래시"