# .github/workflows/build-fast.yml
name: ESP32-C3 Fast Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 코드 다운로드
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 2. ESP-IDF 설치 (캐시 사용)
    - name: ESP-IDF 캐시
      uses: actions/cache@v4
      id: esp-idf-cache
      with:
        path: ~/esp
        key: esp-idf-v5.4.2-${{ runner.os }}

    - name: ESP-IDF 설치
      if: steps.esp-idf-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/esp
        cd ~/esp
        git clone --branch v5.4.2 --depth 1 https://github.com/espressif/esp-idf.git
        cd esp-idf
        ./install.sh esp32c3
        echo "IDF_PATH=~/esp/esp-idf" >> $GITHUB_ENV

    # 3. ESP-Matter 최소 설치 (ESP32 컴포넌트만)
    - name: ESP-Matter 최소 설치
      run: |
        # ESP-IDF 환경 활성화
        export IDF_PATH=~/esp/esp-idf
        source $IDF_PATH/export.sh
        
        # ESP-Matter 필수 부분만 클론 (shallow clone)
        mkdir -p ~/esp-matter
        cd ~/esp-matter
        
        # 메인 저장소만 shallow clone
        git clone --depth 1 --branch main https://github.com/espressif/esp-matter.git .
        
        # ESP32 관련 서브모듈만 초기화 (전체 말고)
        git submodule update --init --depth 1 \
          connectedhomeip/connectedhomeip/config/esp32 \
          connectedhomeip/connectedhomeip/src/platform/ESP32 \
          connectedhomeip/connectedhomeip/examples/platform/esp32
          
        # 필수 의존성만 설치 (전체 install.sh 대신)
        cd connectedhomeip/connectedhomeip
        scripts/checkout_submodules.py --platform esp32
        
        echo "ESP_MATTER_PATH=~/esp-matter" >> $GITHUB_ENV

    # 4. 빌드 환경 설정
    - name: 빌드 환경 설정
      run: |
        export IDF_PATH=~/esp/esp-idf
        export ESP_MATTER_PATH=~/esp-matter
        export MATTER_SDK_PATH=$ESP_MATTER_PATH/connectedhomeip/connectedhomeip
        
        # 환경변수 저장
        echo "IDF_PATH=~/esp/esp-idf" >> $GITHUB_ENV
        echo "ESP_MATTER_PATH=~/esp-matter" >> $GITHUB_ENV
        echo "MATTER_SDK_PATH=~/esp-matter/connectedhomeip/connectedhomeip" >> $GITHUB_ENV

    # 5. 프로젝트 빌드
    - name: 프로젝트 빌드
      run: |
        # 환경 재설정
        source $IDF_PATH/export.sh
        
        # 빌드
        idf.py set-target esp32c3
        idf.py build

    # 6. 바이너리 업로드
    - name: 바이너리 파일 업로드
      uses: actions/upload-artifact@v4
      with:
        name: esp32c3-firmware-fast-${{ github.run_number }}
        path: |
          build/*.bin
          build/*.elf
          build/bootloader/bootloader.bin
          build/partition_table/partition-table.bin
        retention-days: 30

    # 7. 빌드 시간 출력
    - name: 빌드 완료
      run: |
        echo "⚡ 빠른 빌드 완료!"
        echo "📦 생성된 파일:"
        ls -la build/*.bin 2>/dev/null || echo "바이너리 확인 중..."
        echo "⏱️ 전체 빌드 시간이 크게 단축되었습니다!"