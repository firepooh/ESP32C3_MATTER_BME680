# .github/workflows/build-ultra-fast.yml
name: ESP32-C3 Ultra Fast Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container: espressif/idf:v5.4.2  # 이미 ESP-IDF가 설치된 컨테이너 사용
    
    steps:
    # 1. 코드 다운로드
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    # 2. Matter 컴포넌트만 다운로드 (전체 클론 없이)
    - name: Matter 컴포넌트 다운로드
      run: |
        # 필수 디렉토리 생성
        mkdir -p /opt/esp-matter
        cd /opt/esp-matter
        
        # GitHub API로 필요한 파일들만 다운로드 (zip 파일)
        wget -q https://github.com/espressif/esp-matter/archive/refs/heads/main.zip
        unzip -q main.zip
        mv esp-matter-main/* .
        rm -rf esp-matter-main main.zip
        
        # 필수 컴포넌트만 초기화
        git submodule update --init --depth 1 --jobs 4 \
          connectedhomeip/connectedhomeip/config/esp32 \
          connectedhomeip/connectedhomeip/src/platform/ESP32
        
        echo "ESP_MATTER_PATH=/opt/esp-matter" >> $GITHUB_ENV

    # 3. 빌드 (환경변수 직접 설정)
    - name: 프로젝트 빌드
      run: |
        # 환경변수 직접 설정 (export.sh 실행 없이)
        export ESP_MATTER_PATH=/opt/esp-matter
        export MATTER_SDK_PATH=/opt/esp-matter/connectedhomeip/connectedhomeip
        
        # ESP-IDF 환경만 활성화
        . $IDF_PATH/export.sh
        
        # 빌드
        idf.py set-target esp32c3
        idf.py build

    # 4. 바이너리 업로드
    - name: 바이너리 업로드
      uses: actions/upload-artifact@v4
      with:
        name: esp32c3-ultra-fast-${{ github.run_number }}
        path: |
          build/*.bin
          build/*.elf
          build/bootloader/bootloader.bin
          build/partition_table/partition-table.bin

    # 5. 완료 메시지
    - name: 빌드 완료
      run: |
        echo "🚀 초고속 빌드 완료!"
        echo "📈 예상 시간 단축: 70-80%"
        ls -la build/*.bin

---
# 추가: 캐시를 활용한 스마트 빌드
# .github/workflows/build-smart.yml
name: ESP32-C3 Smart Build (with Cache)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    # ESP-IDF + ESP-Matter 통합 캐시
    - name: ESP 개발환경 캐시
      uses: actions/cache@v4
      id: esp-cache
      with:
        path: |
          ~/esp-idf
          ~/esp-matter-minimal
        key: esp-dev-v5.4.2-matter-minimal-${{ hashFiles('**/CMakeLists.txt', '**/sdkconfig.defaults') }}
        restore-keys: |
          esp-dev-v5.4.2-matter-minimal-

    # 캐시 미스일 때만 설치
    - name: ESP 개발환경 설치 (캐시 미스시)
      if: steps.esp-cache.outputs.cache-hit != 'true'
      run: |
        # ESP-IDF 설치
        mkdir -p ~/esp-idf
        cd ~/esp-idf
        git clone --branch v5.4.2 --depth 1 https://github.com/espressif/esp-idf.git .
        ./install.sh esp32c3
        
        # ESP-Matter 최소 설치
        mkdir -p ~/esp-matter-minimal
        cd ~/esp-matter-minimal
        
        # 핵심 파일들만 다운로드
        wget -q https://api.github.com/repos/espressif/esp-matter/tarball/main -O matter.tar.gz
        tar -xzf matter.tar.gz --strip-components=1
        rm matter.tar.gz
        
        # ESP32 관련 서브모듈만
        git submodule update --init --depth 1 --recursive \
          connectedhomeip/connectedhomeip/config/esp32/components

    # 빌드 환경 설정
    - name: 환경 설정
      run: |
        echo "IDF_PATH=~/esp-idf" >> $GITHUB_ENV
        echo "ESP_MATTER_PATH=~/esp-matter-minimal" >> $GITHUB_ENV

    # 빌드
    - name: 빌드
      run: |
        source $IDF_PATH/export.sh
        idf.py set-target esp32c3
        idf.py build

    # 결과 업로드
    - name: 바이너리 업로드
      uses: actions/upload-artifact@v4
      with:
        name: esp32c3-smart-${{ github.run_number }}
        path: build/*.bin
