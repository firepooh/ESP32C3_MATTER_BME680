# .github/workflows/build-docker.yml
# Docker를 사용한 안정적인 빌드 버전
name: ESP32-C3 Docker Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: espressif/idf:v5.4.2  # ESP-IDF 공식 Docker 이미지
    
    steps:
    # 1. 코드 다운로드
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # 2. 필요한 패키지 설치
    - name: 기본 패키지 설치
      run: |
        apt-get update
        apt-get install -y git

    # 3. ESP-Matter 설치 (워크스페이스에)
    - name: ESP-Matter 설치
      run: |
        # ESP-IDF 환경 활성화
        . $IDF_PATH/export.sh
        
        # ESP-Matter 클론 및 설치
        cd /tmp
        git clone --recursive https://github.com/espressif/esp-matter.git
        cd esp-matter
        ./install.sh
        
        # 환경변수 내보내기
        echo "ESP_MATTER_PATH=/tmp/esp-matter" >> $GITHUB_ENV

    # 4. 프로젝트 빌드
    - name: 프로젝트 빌드
      run: |
        # ESP-IDF 환경 다시 활성화
        . $IDF_PATH/export.sh
        
        # ESP-Matter 환경 활성화
        . /tmp/esp-matter/export.sh
        
        # 빌드
        idf.py set-target esp32c3
        idf.py build

    # 5. 바이너리 업로드
    - name: 바이너리 파일 업로드
      uses: actions/upload-artifact@v4
      with:
        name: esp32c3-firmware-${{ github.run_number }}
        path: |
          build/*.bin
          build/*.elf
          build/bootloader/bootloader.bin
          build/partition_table/partition-table.bin
        retention-days: 30

    # 6. 빌드 정보
    - name: 빌드 정보 출력
      run: |
        echo "✅ Docker 빌드 완료!"
        ls -la build/*.bin build/*.elf 2>/dev/null || echo "바이너리 파일 확인 중..."
